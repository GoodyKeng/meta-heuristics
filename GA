##########################################################################
#problem definition:
#Maximizef(x,y)=cos⁡( (x-1.14)^3)-100000*(y^2-x)^2
#constraints: 0≤x≤2; 0≤y≤3; x+y≥1	
#Ans:Maximum=1 at (x,y)=(1,1)
##########################################################################

import numpy as np
#np.random.seed(10)
import matplotlib.pyplot as plt

#initialize chromosome within constraint
def init_chrom():
    chromo=np.zeros(shape=(population,n_var),dtype=float)
    while chromo.all() == 0:
        for i in range(population):
            tmp = 0
            for j in range(n_var):
                if j == 0:
                    chromo[i,j] = np.random.uniform(0,2)
                else:
                    chromo[i,j] = np.random.uniform(0,3)
                tmp += chromo[i,j]
            if tmp <= 1:
                for j in range(n_var):
                    chromo[i,j]=0
    return chromo

#fitness function
def evaluation(chrom):
    fit = []
    for i in range(population):
        t = np.math.cos((chrom[i,0] - 1.14)**3) \
        - 100000 * (((chrom[i,1]**2)-(chrom[i,0]))**2)
        fit.append(t)
    return np.asarray(fit)

#normalize fitness and add epsilon to avoid Zerodivision
def N_fit(fitness):
    return (fitness-min(fitness)+0.0001)/(max(fitness)-min(fitness)+0.0001)

#roulette wheel to select parent
def roulette_wheel():
    selectP = []
    parent_chrom = np.copy(chrom)
    for i in range(population):
        selectP.append(np.random.uniform(0,1))
        if selectP[i] > 0 and selectP[i] < accumulate_chance[0]:
            parent_chrom[i] = chrom[0]
        else:
            for k in range(population):
                if selectP[i] > accumulate_chance[k] and selectP[i] < accumulate_chance[k+1]:
                    parent_chrom[i] = chrom[k+1]
    return parent_chrom

#crossover
def crossover():
    offspring = np.copy(parent_chrom)
    for i in range(0,population,2):
        cross_r = np.random.uniform(0,1)
        alpha = np.random.uniform(0,1)
        beta = np.random.uniform(0,1)
        if cross_r < 0.8:
                offspring[i] = (alpha*parent_chrom[i]) + (1-alpha)*parent_chrom[i+1]
                offspring[i+1] = (beta*parent_chrom[i]) + (1-beta)*parent_chrom[i+1]
        else:
            offspring[i] = parent_chrom[i]
            offspring[i+1] = parent_chrom[i]
    return offspring

def mutation():
    s = np.random.uniform(0,1)
    if s > 0.5:
        s=1
    else:
        s=-1
    R=0.01
    U = np.random.uniform(0,1)
    k = np.random.randint(4,20)
    A = 2**(-U*k)
    for i in range(population):
        muta_r = np.random.random()
        if muta_r < 0.8:
            offspring[i] += s*R*A
    return offspring

#check offspring whether it within constraint or not
def check():
    xy_sum = np.sum(offspring,axis=1)
    for i in range(population):
        if xy_sum[i] < 1:
            offspring[i] = parent_chrom[i]
        elif offspring[i,0] < 0 or offspring[i,0] > 2:
            offspring[i] = parent_chrom[i]
        elif offspring[i,1] < 0 or offspring[i,1] > 3:
            offspring[i] = parent_chrom[i]
    return offspring

#store all chrom and offspring then pick the top10
def comparison():
    all_chrom = np.append(chrom,offspring,axis=0)
    all_fitness= np.append(fitness,offspring_fitness,axis=0)
    return all_chrom[np.argsort(-all_fitness)][:population,:]

if __name__ == "__main__":
    iteration=1000
    population = 10
    n_var = 2
    chrom = init_chrom()
    #record fitness local optima
    local_op = []
    #record fitness local optima
    global_op = []
    for z in range(iteration):
        fitness = evaluation(chrom)
        print('fitness',fitness)
        local_op.append(np.min(fitness))
        global_op.append(np.max(fitness))
        n_fitness = N_fit(fitness)
        #sum all fitness to do roulette wheel
        total_fitness = sum(n_fitness)
        chance = n_fitness/total_fitness
        accumulate_chance = np.add.accumulate(chance)
        parent_chrom = roulette_wheel()
        offspring = crossover()
        offspring = mutation()
        offspring = check()
        #offspring fitness
        offspring_fitness = evaluation(offspring)
        chrom = comparison()
    print(chrom[np.argmax(fitness)])
    
    #result visulization
    plt.plot(local_op)
    plt.plot(global_op)
    plt.xlabel('iteration')
    plt.ylabel('fitness')
    plt.suptitle('GA')
