##########################################################################
#problem definition:
#Maximizef(x,y)=cos⁡( (x-1.14)^3)-100000*(y^2-x)^2
#constraints: 0≤x≤2; 0≤y≤3; x+y≥1	
#Ans:Maximum=1 at (x,y)=(1,1)
##########################################################################

import matplotlib.pyplot as plt
from matplotlib import ticker
import numpy as np
import sys
#np.random.seed(10)
np.set_printoptions(threshold=sys.maxsize)

def init():
    population = np.zeros(shape=(n_agent,n_var),dtype=float)
    while population.all() == 0:
        for i in range(n_agent):
            tmp = 0
            for j in range(n_var):
                if j == 0:
                    population[i,j] = np.random.uniform(0,2)
                else:
                    population[i,j] = np.random.uniform(0,3)
                tmp += population[i,j]
            if tmp <= 1:
                for j in range(n_var):
                    population[i,j] = 0
    return population

def evaluation(pop):
    fit = []
    for i in range(n_agent):
        t = np.math.cos((pop[i,0] - 1.14)**3) \
        - 100000 * (((pop[i,1]**2)-(pop[i,0]))**2)
        fit.append(t)
    return np.asarray(fit)

#r1 will converge linearly from a
def R1(current_ite,iteration):
    a = 2
    return a - (current_ite*(a/iteration))

#agent updates by using sine when if r4 < 0.5, updates by using cosine when r4 > 0.5
def agent_update(agent,r1,p):
    agent = np.copy(agent)
    for i in range(n_agent):
        for j in range(n_var):
            r2 = np.random.uniform(0,2*np.math.pi)
            r3 = np.random.uniform(0,2)
            r4 = np.random.rand()
            if r4 < 0.5:
                agent[i,j] = agent[i,j]+r1*np.math.sin(r2)*abs(r3*p[j]-agent[i,j])
            else:
                agent[i,j] = agent[i,j]+r1*np.math.cos(r2)*abs(r3*p[j]-agent[i,j])
    return agent

def check():
    xy_sum = np.sum(new_agent,axis=1)
    for i in range(n_agent):
        if xy_sum[i] < 1:
            new_agent[i] = agent[i]
        elif new_agent[i,0] < 0 or new_agent[i,0] > 2:
            new_agent[i] = agent[i]
        elif new_agent[i,1] < 0 or new_agent[i,1] > 3:
            new_agent[i] = agent[i]
    return new_agent

def comparison():
    all_chrom = np.append(agent,new_agent,axis=0)
    all_fitness= np.append(fitness,new_agent_fitness,axis=0)
    return all_chrom[np.argsort(-all_fitness)][:n_agent,:]

if __name__== "__main__":
    n_agent = 10
    n_var= 2
    agent = init()
    iteration = 100

    #record all max fitness
    maxfit = np.zeros(shape=(iteration),dtype=float)
    for i in range(iteration):
        fitness = evaluation(agent)
#        print(fitness)
        #store the best solution in P
        P = agent[np.argmax(fitness)]
        r1 = R1(i,iteration)
        new_agent= agent_update(agent,r1,P)
        new_agent = check()
        new_agent_fitness = evaluation(new_agent)
        agent = comparison()
        maxfit[i] = max(new_agent_fitness)
    print('fitness:\n',max(fitness))
    print('agent:\n',agent[np.argmax(fitness)])

    #result visualization
    fig , ax = plt.subplots()
    for axis in [ax.xaxis]:
        axis.set_major_locator(ticker.MaxNLocator(integer=True))
    x = np.arange(0, iteration)
    y = np.array(maxfit)
    l1, = plt.plot(x, y)
    current = 0
    total_Best_FV = []
    for fitness_val in maxfit:
        if fitness_val > current: # > For maximum problem
            current = fitness_val
        total_Best_FV.append(current)
    x_c = np.arange(0, iteration)
    y_c = np.array(total_Best_FV)
    l2, = plt.plot(x_c, y_c)
    plt.suptitle('SCA')
    plt.xlabel('ith iteration')
    plt.ylabel('Fitness Value')
    plt.legend([l1, l2], ['Current Best', 'Global Best'], loc = 'lower right')
    plt.show()
